%a.
%
%
%remove(l1...ln, e) = {
%		(), l = NULL
%		l1 and remove(l2...ln, e), e\=l1
%		remove(l2...ln, e), otherwise}
%remove(l - List, e - Number, R - List)
%remove(i, i, o)

remove([], _, []).
remove([H|T], E, R):-H=:=E, 
    remove(T, E, R),
    R=R.
remove([H|T], E, R):-H=\=E,
    remove(T, E, R1),
    R=[H|R1].

%b.
%
%
%occ(l1...ln, e)={
%		0, l = NULL
%		1 + occ(l2...ln, e), e = l1
%		occ(l2...ln, e), otherwise}
%occ(l - List, e - Number, r - Number)
%occ(i, i, o)
occ([], _, 0).
occ([H|T], E, R) :- H == E,
    occ(T, E, R1),
    R is R1 + 1.
occ([H|T], E, R) :- H \= E,
    occ(T, E, R).

%
%number_atom(l1...ln) = {
%		(), l = NULL
%		(l1, occ(l1...ln, l1)) and number_atom(remove(l2...ln, l1))
%number_atom(l - List, r - List)
%number_atom(i, o)


number_atom([], []).
number_atom([H|T], [[H, ROcc]|R]) :-
    occ([H|T], H, ROcc),
    remove(T, H, RRem),
    number_atom(RRem, R).

%input: number_atom([1, 1, 2, 1, 3, 5, 5], X)
%output:  = [[1, 3], [2, 1], [3, 1], [5, 2]]